// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/database/database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/lebleuciel/maani/models"
	database "github.com/lebleuciel/maani/pkg/database"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddFileTypeIfNotExist mocks base method.
func (m *MockDatabase) AddFileTypeIfNotExist(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFileTypeIfNotExist", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFileTypeIfNotExist indicates an expected call of AddFileTypeIfNotExist.
func (mr *MockDatabaseMockRecorder) AddFileTypeIfNotExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileTypeIfNotExist", reflect.TypeOf((*MockDatabase)(nil).AddFileTypeIfNotExist), arg0)
}

// CreateUser mocks base method.
func (m *MockDatabase) CreateUser(spec models.UserCreationParameters) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", spec)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDatabaseMockRecorder) CreateUser(spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDatabase)(nil).CreateUser), spec)
}

// GetFile mocks base method.
func (m *MockDatabase) GetFile(arg0, arg1 []string) (models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", arg0, arg1)
	ret0, _ := ret[0].(models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockDatabaseMockRecorder) GetFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockDatabase)(nil).GetFile), arg0, arg1)
}

// GetFileList mocks base method.
func (m *MockDatabase) GetFileList() ([]models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileList")
	ret0, _ := ret[0].([]models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileList indicates an expected call of GetFileList.
func (mr *MockDatabaseMockRecorder) GetFileList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileList", reflect.TypeOf((*MockDatabase)(nil).GetFileList))
}

// GetFileTypes mocks base method.
func (m *MockDatabase) GetFileTypes() ([]models.FileType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileTypes")
	ret0, _ := ret[0].([]models.FileType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileTypes indicates an expected call of GetFileTypes.
func (mr *MockDatabaseMockRecorder) GetFileTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileTypes", reflect.TypeOf((*MockDatabase)(nil).GetFileTypes))
}

// GetFilesSize mocks base method.
func (m *MockDatabase) GetFilesSize() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesSize")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesSize indicates an expected call of GetFilesSize.
func (mr *MockDatabaseMockRecorder) GetFilesSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesSize", reflect.TypeOf((*MockDatabase)(nil).GetFilesSize))
}

// GetUserByEmail mocks base method.
func (m *MockDatabase) GetUserByEmail(email string) (*models.UserWithPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*models.UserWithPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockDatabaseMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDatabase)(nil).GetUserByEmail), email)
}

// GetUserList mocks base method.
func (m *MockDatabase) GetUserList() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserList indicates an expected call of GetUserList.
func (mr *MockDatabaseMockRecorder) GetUserList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockDatabase)(nil).GetUserList))
}

// NewSerializableTransaction mocks base method.
func (m *MockDatabase) NewSerializableTransaction(ctx context.Context) (database.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSerializableTransaction", ctx)
	ret0, _ := ret[0].(database.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSerializableTransaction indicates an expected call of NewSerializableTransaction.
func (mr *MockDatabaseMockRecorder) NewSerializableTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSerializableTransaction", reflect.TypeOf((*MockDatabase)(nil).NewSerializableTransaction), ctx)
}

// NewTransaction mocks base method.
func (m *MockDatabase) NewTransaction(ctx context.Context, isolation sql.IsolationLevel) (database.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction", ctx, isolation)
	ret0, _ := ret[0].(database.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *MockDatabaseMockRecorder) NewTransaction(ctx, isolation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockDatabase)(nil).NewTransaction), ctx, isolation)
}

// SaveFile mocks base method.
func (m *MockDatabase) SaveFile(arg0 models.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockDatabaseMockRecorder) SaveFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockDatabase)(nil).SaveFile), arg0)
}

// UpdateUserLastLogin mocks base method.
func (m *MockDatabase) UpdateUserLastLogin(userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastLogin", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLastLogin indicates an expected call of UpdateUserLastLogin.
func (mr *MockDatabaseMockRecorder) UpdateUserLastLogin(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastLogin", reflect.TypeOf((*MockDatabase)(nil).UpdateUserLastLogin), userId)
}

// MockTransactionMethods is a mock of TransactionMethods interface.
type MockTransactionMethods struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMethodsMockRecorder
}

// MockTransactionMethodsMockRecorder is the mock recorder for MockTransactionMethods.
type MockTransactionMethodsMockRecorder struct {
	mock *MockTransactionMethods
}

// NewMockTransactionMethods creates a new mock instance.
func NewMockTransactionMethods(ctrl *gomock.Controller) *MockTransactionMethods {
	mock := &MockTransactionMethods{ctrl: ctrl}
	mock.recorder = &MockTransactionMethodsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionMethods) EXPECT() *MockTransactionMethodsMockRecorder {
	return m.recorder
}

// NewSerializableTransaction mocks base method.
func (m *MockTransactionMethods) NewSerializableTransaction(ctx context.Context) (database.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSerializableTransaction", ctx)
	ret0, _ := ret[0].(database.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSerializableTransaction indicates an expected call of NewSerializableTransaction.
func (mr *MockTransactionMethodsMockRecorder) NewSerializableTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSerializableTransaction", reflect.TypeOf((*MockTransactionMethods)(nil).NewSerializableTransaction), ctx)
}

// NewTransaction mocks base method.
func (m *MockTransactionMethods) NewTransaction(ctx context.Context, isolation sql.IsolationLevel) (database.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction", ctx, isolation)
	ret0, _ := ret[0].(database.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *MockTransactionMethodsMockRecorder) NewTransaction(ctx, isolation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockTransactionMethods)(nil).NewTransaction), ctx, isolation)
}

// MockUsersDatabaseMethods is a mock of UsersDatabaseMethods interface.
type MockUsersDatabaseMethods struct {
	ctrl     *gomock.Controller
	recorder *MockUsersDatabaseMethodsMockRecorder
}

// MockUsersDatabaseMethodsMockRecorder is the mock recorder for MockUsersDatabaseMethods.
type MockUsersDatabaseMethodsMockRecorder struct {
	mock *MockUsersDatabaseMethods
}

// NewMockUsersDatabaseMethods creates a new mock instance.
func NewMockUsersDatabaseMethods(ctrl *gomock.Controller) *MockUsersDatabaseMethods {
	mock := &MockUsersDatabaseMethods{ctrl: ctrl}
	mock.recorder = &MockUsersDatabaseMethodsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersDatabaseMethods) EXPECT() *MockUsersDatabaseMethodsMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsersDatabaseMethods) CreateUser(spec models.UserCreationParameters) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", spec)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersDatabaseMethodsMockRecorder) CreateUser(spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersDatabaseMethods)(nil).CreateUser), spec)
}

// GetUserByEmail mocks base method.
func (m *MockUsersDatabaseMethods) GetUserByEmail(email string) (*models.UserWithPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*models.UserWithPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUsersDatabaseMethodsMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUsersDatabaseMethods)(nil).GetUserByEmail), email)
}

// GetUserList mocks base method.
func (m *MockUsersDatabaseMethods) GetUserList() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserList indicates an expected call of GetUserList.
func (mr *MockUsersDatabaseMethodsMockRecorder) GetUserList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockUsersDatabaseMethods)(nil).GetUserList))
}

// UpdateUserLastLogin mocks base method.
func (m *MockUsersDatabaseMethods) UpdateUserLastLogin(userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastLogin", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLastLogin indicates an expected call of UpdateUserLastLogin.
func (mr *MockUsersDatabaseMethodsMockRecorder) UpdateUserLastLogin(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastLogin", reflect.TypeOf((*MockUsersDatabaseMethods)(nil).UpdateUserLastLogin), userId)
}

// MockFilesDatabaseMethods is a mock of FilesDatabaseMethods interface.
type MockFilesDatabaseMethods struct {
	ctrl     *gomock.Controller
	recorder *MockFilesDatabaseMethodsMockRecorder
}

// MockFilesDatabaseMethodsMockRecorder is the mock recorder for MockFilesDatabaseMethods.
type MockFilesDatabaseMethodsMockRecorder struct {
	mock *MockFilesDatabaseMethods
}

// NewMockFilesDatabaseMethods creates a new mock instance.
func NewMockFilesDatabaseMethods(ctrl *gomock.Controller) *MockFilesDatabaseMethods {
	mock := &MockFilesDatabaseMethods{ctrl: ctrl}
	mock.recorder = &MockFilesDatabaseMethodsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesDatabaseMethods) EXPECT() *MockFilesDatabaseMethodsMockRecorder {
	return m.recorder
}

// AddFileTypeIfNotExist mocks base method.
func (m *MockFilesDatabaseMethods) AddFileTypeIfNotExist(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFileTypeIfNotExist", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFileTypeIfNotExist indicates an expected call of AddFileTypeIfNotExist.
func (mr *MockFilesDatabaseMethodsMockRecorder) AddFileTypeIfNotExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileTypeIfNotExist", reflect.TypeOf((*MockFilesDatabaseMethods)(nil).AddFileTypeIfNotExist), arg0)
}

// GetFile mocks base method.
func (m *MockFilesDatabaseMethods) GetFile(arg0, arg1 []string) (models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", arg0, arg1)
	ret0, _ := ret[0].(models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockFilesDatabaseMethodsMockRecorder) GetFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockFilesDatabaseMethods)(nil).GetFile), arg0, arg1)
}

// GetFileList mocks base method.
func (m *MockFilesDatabaseMethods) GetFileList() ([]models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileList")
	ret0, _ := ret[0].([]models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileList indicates an expected call of GetFileList.
func (mr *MockFilesDatabaseMethodsMockRecorder) GetFileList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileList", reflect.TypeOf((*MockFilesDatabaseMethods)(nil).GetFileList))
}

// GetFileTypes mocks base method.
func (m *MockFilesDatabaseMethods) GetFileTypes() ([]models.FileType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileTypes")
	ret0, _ := ret[0].([]models.FileType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileTypes indicates an expected call of GetFileTypes.
func (mr *MockFilesDatabaseMethodsMockRecorder) GetFileTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileTypes", reflect.TypeOf((*MockFilesDatabaseMethods)(nil).GetFileTypes))
}

// GetFilesSize mocks base method.
func (m *MockFilesDatabaseMethods) GetFilesSize() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesSize")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesSize indicates an expected call of GetFilesSize.
func (mr *MockFilesDatabaseMethodsMockRecorder) GetFilesSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesSize", reflect.TypeOf((*MockFilesDatabaseMethods)(nil).GetFilesSize))
}

// SaveFile mocks base method.
func (m *MockFilesDatabaseMethods) SaveFile(arg0 models.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockFilesDatabaseMethodsMockRecorder) SaveFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockFilesDatabaseMethods)(nil).SaveFile), arg0)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// AddFileTypeIfNotExist mocks base method.
func (m *MockTransaction) AddFileTypeIfNotExist(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFileTypeIfNotExist", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFileTypeIfNotExist indicates an expected call of AddFileTypeIfNotExist.
func (mr *MockTransactionMockRecorder) AddFileTypeIfNotExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileTypeIfNotExist", reflect.TypeOf((*MockTransaction)(nil).AddFileTypeIfNotExist), arg0)
}

// Commit mocks base method.
func (m *MockTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit))
}

// CreateUser mocks base method.
func (m *MockTransaction) CreateUser(spec models.UserCreationParameters) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", spec)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockTransactionMockRecorder) CreateUser(spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockTransaction)(nil).CreateUser), spec)
}

// GetFile mocks base method.
func (m *MockTransaction) GetFile(arg0, arg1 []string) (models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", arg0, arg1)
	ret0, _ := ret[0].(models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockTransactionMockRecorder) GetFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockTransaction)(nil).GetFile), arg0, arg1)
}

// GetFileList mocks base method.
func (m *MockTransaction) GetFileList() ([]models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileList")
	ret0, _ := ret[0].([]models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileList indicates an expected call of GetFileList.
func (mr *MockTransactionMockRecorder) GetFileList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileList", reflect.TypeOf((*MockTransaction)(nil).GetFileList))
}

// GetFileTypes mocks base method.
func (m *MockTransaction) GetFileTypes() ([]models.FileType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileTypes")
	ret0, _ := ret[0].([]models.FileType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileTypes indicates an expected call of GetFileTypes.
func (mr *MockTransactionMockRecorder) GetFileTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileTypes", reflect.TypeOf((*MockTransaction)(nil).GetFileTypes))
}

// GetFilesSize mocks base method.
func (m *MockTransaction) GetFilesSize() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesSize")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesSize indicates an expected call of GetFilesSize.
func (mr *MockTransactionMockRecorder) GetFilesSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesSize", reflect.TypeOf((*MockTransaction)(nil).GetFilesSize))
}

// GetUserByEmail mocks base method.
func (m *MockTransaction) GetUserByEmail(email string) (*models.UserWithPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*models.UserWithPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockTransactionMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockTransaction)(nil).GetUserByEmail), email)
}

// GetUserList mocks base method.
func (m *MockTransaction) GetUserList() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserList indicates an expected call of GetUserList.
func (mr *MockTransactionMockRecorder) GetUserList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockTransaction)(nil).GetUserList))
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback))
}

// SaveFile mocks base method.
func (m *MockTransaction) SaveFile(arg0 models.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockTransactionMockRecorder) SaveFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockTransaction)(nil).SaveFile), arg0)
}

// UpdateUserLastLogin mocks base method.
func (m *MockTransaction) UpdateUserLastLogin(userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastLogin", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLastLogin indicates an expected call of UpdateUserLastLogin.
func (mr *MockTransactionMockRecorder) UpdateUserLastLogin(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastLogin", reflect.TypeOf((*MockTransaction)(nil).UpdateUserLastLogin), userId)
}
