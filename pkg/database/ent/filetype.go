// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lebleuciel/maani/pkg/database/ent/filetype"
)

// Filetype is the model entity for the Filetype schema.
type Filetype struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// AllowedSize holds the value of the "allowed_size" field.
	AllowedSize int `json:"allowed_size,omitempty"`
	// IsBanned holds the value of the "is_banned" field.
	IsBanned bool `json:"is_banned,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FiletypeQuery when eager-loading is set.
	Edges        FiletypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FiletypeEdges holds the relations/edges for other nodes in the graph.
type FiletypeEdges struct {
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e FiletypeEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[0] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Filetype) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filetype.FieldIsBanned:
			values[i] = new(sql.NullBool)
		case filetype.FieldAllowedSize:
			values[i] = new(sql.NullInt64)
		case filetype.FieldID:
			values[i] = new(sql.NullString)
		case filetype.FieldCreatedAt, filetype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Filetype fields.
func (f *Filetype) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filetype.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				f.ID = value.String
			}
		case filetype.FieldAllowedSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allowed_size", values[i])
			} else if value.Valid {
				f.AllowedSize = int(value.Int64)
			}
		case filetype.FieldIsBanned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_banned", values[i])
			} else if value.Valid {
				f.IsBanned = value.Bool
			}
		case filetype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = new(time.Time)
				*f.CreatedAt = value.Time
			}
		case filetype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Filetype.
// This includes values selected through modifiers, order, etc.
func (f *Filetype) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryFiles queries the "files" edge of the Filetype entity.
func (f *Filetype) QueryFiles() *FileQuery {
	return NewFiletypeClient(f.config).QueryFiles(f)
}

// Update returns a builder for updating this Filetype.
// Note that you need to call Filetype.Unwrap() before calling this method if this Filetype
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Filetype) Update() *FiletypeUpdateOne {
	return NewFiletypeClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Filetype entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Filetype) Unwrap() *Filetype {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Filetype is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Filetype) String() string {
	var builder strings.Builder
	builder.WriteString("Filetype(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("allowed_size=")
	builder.WriteString(fmt.Sprintf("%v", f.AllowedSize))
	builder.WriteString(", ")
	builder.WriteString("is_banned=")
	builder.WriteString(fmt.Sprintf("%v", f.IsBanned))
	builder.WriteString(", ")
	if v := f.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Filetypes is a parsable slice of Filetype.
type Filetypes []*Filetype
