// Code generated by ent, DO NOT EDIT.

package filetype

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the filetype type in the database.
	Label = "filetype"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "type"
	// FieldAllowedSize holds the string denoting the allowed_size field in the database.
	FieldAllowedSize = "allowed_size"
	// FieldIsBanned holds the string denoting the is_banned field in the database.
	FieldIsBanned = "is_banned"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeFiles holds the string denoting the files edge name in mutations.
	EdgeFiles = "files"
	// FileFieldID holds the string denoting the ID field of the File.
	FileFieldID = "id"
	// Table holds the table name of the filetype in the database.
	Table = "filetypes"
	// FilesTable is the table that holds the files relation/edge.
	FilesTable = "files"
	// FilesInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FilesInverseTable = "files"
	// FilesColumn is the table column denoting the files relation/edge.
	FilesColumn = "type"
)

// Columns holds all SQL columns for filetype fields.
var Columns = []string{
	FieldID,
	FieldAllowedSize,
	FieldIsBanned,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAllowedSize holds the default value on creation for the "allowed_size" field.
	DefaultAllowedSize int
	// DefaultIsBanned holds the default value on creation for the "is_banned" field.
	DefaultIsBanned bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Filetype queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAllowedSize orders the results by the allowed_size field.
func ByAllowedSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowedSize, opts...).ToFunc()
}

// ByIsBanned orders the results by the is_banned field.
func ByIsBanned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsBanned, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFilesCount orders the results by files count.
func ByFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFilesStep(), opts...)
	}
}

// ByFiles orders the results by files terms.
func ByFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilesInverseTable, FileFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
	)
}
