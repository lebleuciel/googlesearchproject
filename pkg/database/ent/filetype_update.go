// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lebleuciel/maani/pkg/database/ent/file"
	"github.com/lebleuciel/maani/pkg/database/ent/filetype"
	"github.com/lebleuciel/maani/pkg/database/ent/predicate"
)

// FiletypeUpdate is the builder for updating Filetype entities.
type FiletypeUpdate struct {
	config
	hooks    []Hook
	mutation *FiletypeMutation
}

// Where appends a list predicates to the FiletypeUpdate builder.
func (fu *FiletypeUpdate) Where(ps ...predicate.Filetype) *FiletypeUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetAllowedSize sets the "allowed_size" field.
func (fu *FiletypeUpdate) SetAllowedSize(i int) *FiletypeUpdate {
	fu.mutation.ResetAllowedSize()
	fu.mutation.SetAllowedSize(i)
	return fu
}

// SetNillableAllowedSize sets the "allowed_size" field if the given value is not nil.
func (fu *FiletypeUpdate) SetNillableAllowedSize(i *int) *FiletypeUpdate {
	if i != nil {
		fu.SetAllowedSize(*i)
	}
	return fu
}

// AddAllowedSize adds i to the "allowed_size" field.
func (fu *FiletypeUpdate) AddAllowedSize(i int) *FiletypeUpdate {
	fu.mutation.AddAllowedSize(i)
	return fu
}

// SetIsBanned sets the "is_banned" field.
func (fu *FiletypeUpdate) SetIsBanned(b bool) *FiletypeUpdate {
	fu.mutation.SetIsBanned(b)
	return fu
}

// SetNillableIsBanned sets the "is_banned" field if the given value is not nil.
func (fu *FiletypeUpdate) SetNillableIsBanned(b *bool) *FiletypeUpdate {
	if b != nil {
		fu.SetIsBanned(*b)
	}
	return fu
}

// SetCreatedAt sets the "created_at" field.
func (fu *FiletypeUpdate) SetCreatedAt(t time.Time) *FiletypeUpdate {
	fu.mutation.SetCreatedAt(t)
	return fu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fu *FiletypeUpdate) SetNillableCreatedAt(t *time.Time) *FiletypeUpdate {
	if t != nil {
		fu.SetCreatedAt(*t)
	}
	return fu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (fu *FiletypeUpdate) ClearCreatedAt() *FiletypeUpdate {
	fu.mutation.ClearCreatedAt()
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FiletypeUpdate) SetUpdatedAt(t time.Time) *FiletypeUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (fu *FiletypeUpdate) AddFileIDs(ids ...int) *FiletypeUpdate {
	fu.mutation.AddFileIDs(ids...)
	return fu
}

// AddFiles adds the "files" edges to the File entity.
func (fu *FiletypeUpdate) AddFiles(f ...*File) *FiletypeUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddFileIDs(ids...)
}

// Mutation returns the FiletypeMutation object of the builder.
func (fu *FiletypeUpdate) Mutation() *FiletypeMutation {
	return fu.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (fu *FiletypeUpdate) ClearFiles() *FiletypeUpdate {
	fu.mutation.ClearFiles()
	return fu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (fu *FiletypeUpdate) RemoveFileIDs(ids ...int) *FiletypeUpdate {
	fu.mutation.RemoveFileIDs(ids...)
	return fu
}

// RemoveFiles removes "files" edges to File entities.
func (fu *FiletypeUpdate) RemoveFiles(f ...*File) *FiletypeUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FiletypeUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FiletypeUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FiletypeUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FiletypeUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FiletypeUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := filetype.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

func (fu *FiletypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(filetype.Table, filetype.Columns, sqlgraph.NewFieldSpec(filetype.FieldID, field.TypeString))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.AllowedSize(); ok {
		_spec.SetField(filetype.FieldAllowedSize, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedAllowedSize(); ok {
		_spec.AddField(filetype.FieldAllowedSize, field.TypeInt, value)
	}
	if value, ok := fu.mutation.IsBanned(); ok {
		_spec.SetField(filetype.FieldIsBanned, field.TypeBool, value)
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.SetField(filetype.FieldCreatedAt, field.TypeTime, value)
	}
	if fu.mutation.CreatedAtCleared() {
		_spec.ClearField(filetype.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(filetype.FieldUpdatedAt, field.TypeTime, value)
	}
	if fu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filetype.FilesTable,
			Columns: []string{filetype.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !fu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filetype.FilesTable,
			Columns: []string{filetype.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filetype.FilesTable,
			Columns: []string{filetype.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FiletypeUpdateOne is the builder for updating a single Filetype entity.
type FiletypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FiletypeMutation
}

// SetAllowedSize sets the "allowed_size" field.
func (fuo *FiletypeUpdateOne) SetAllowedSize(i int) *FiletypeUpdateOne {
	fuo.mutation.ResetAllowedSize()
	fuo.mutation.SetAllowedSize(i)
	return fuo
}

// SetNillableAllowedSize sets the "allowed_size" field if the given value is not nil.
func (fuo *FiletypeUpdateOne) SetNillableAllowedSize(i *int) *FiletypeUpdateOne {
	if i != nil {
		fuo.SetAllowedSize(*i)
	}
	return fuo
}

// AddAllowedSize adds i to the "allowed_size" field.
func (fuo *FiletypeUpdateOne) AddAllowedSize(i int) *FiletypeUpdateOne {
	fuo.mutation.AddAllowedSize(i)
	return fuo
}

// SetIsBanned sets the "is_banned" field.
func (fuo *FiletypeUpdateOne) SetIsBanned(b bool) *FiletypeUpdateOne {
	fuo.mutation.SetIsBanned(b)
	return fuo
}

// SetNillableIsBanned sets the "is_banned" field if the given value is not nil.
func (fuo *FiletypeUpdateOne) SetNillableIsBanned(b *bool) *FiletypeUpdateOne {
	if b != nil {
		fuo.SetIsBanned(*b)
	}
	return fuo
}

// SetCreatedAt sets the "created_at" field.
func (fuo *FiletypeUpdateOne) SetCreatedAt(t time.Time) *FiletypeUpdateOne {
	fuo.mutation.SetCreatedAt(t)
	return fuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuo *FiletypeUpdateOne) SetNillableCreatedAt(t *time.Time) *FiletypeUpdateOne {
	if t != nil {
		fuo.SetCreatedAt(*t)
	}
	return fuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (fuo *FiletypeUpdateOne) ClearCreatedAt() *FiletypeUpdateOne {
	fuo.mutation.ClearCreatedAt()
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FiletypeUpdateOne) SetUpdatedAt(t time.Time) *FiletypeUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (fuo *FiletypeUpdateOne) AddFileIDs(ids ...int) *FiletypeUpdateOne {
	fuo.mutation.AddFileIDs(ids...)
	return fuo
}

// AddFiles adds the "files" edges to the File entity.
func (fuo *FiletypeUpdateOne) AddFiles(f ...*File) *FiletypeUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddFileIDs(ids...)
}

// Mutation returns the FiletypeMutation object of the builder.
func (fuo *FiletypeUpdateOne) Mutation() *FiletypeMutation {
	return fuo.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (fuo *FiletypeUpdateOne) ClearFiles() *FiletypeUpdateOne {
	fuo.mutation.ClearFiles()
	return fuo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (fuo *FiletypeUpdateOne) RemoveFileIDs(ids ...int) *FiletypeUpdateOne {
	fuo.mutation.RemoveFileIDs(ids...)
	return fuo
}

// RemoveFiles removes "files" edges to File entities.
func (fuo *FiletypeUpdateOne) RemoveFiles(f ...*File) *FiletypeUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the FiletypeUpdate builder.
func (fuo *FiletypeUpdateOne) Where(ps ...predicate.Filetype) *FiletypeUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FiletypeUpdateOne) Select(field string, fields ...string) *FiletypeUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Filetype entity.
func (fuo *FiletypeUpdateOne) Save(ctx context.Context) (*Filetype, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FiletypeUpdateOne) SaveX(ctx context.Context) *Filetype {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FiletypeUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FiletypeUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FiletypeUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := filetype.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

func (fuo *FiletypeUpdateOne) sqlSave(ctx context.Context) (_node *Filetype, err error) {
	_spec := sqlgraph.NewUpdateSpec(filetype.Table, filetype.Columns, sqlgraph.NewFieldSpec(filetype.FieldID, field.TypeString))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Filetype.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filetype.FieldID)
		for _, f := range fields {
			if !filetype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.AllowedSize(); ok {
		_spec.SetField(filetype.FieldAllowedSize, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedAllowedSize(); ok {
		_spec.AddField(filetype.FieldAllowedSize, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.IsBanned(); ok {
		_spec.SetField(filetype.FieldIsBanned, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.SetField(filetype.FieldCreatedAt, field.TypeTime, value)
	}
	if fuo.mutation.CreatedAtCleared() {
		_spec.ClearField(filetype.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(filetype.FieldUpdatedAt, field.TypeTime, value)
	}
	if fuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filetype.FilesTable,
			Columns: []string{filetype.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !fuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filetype.FilesTable,
			Columns: []string{filetype.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filetype.FilesTable,
			Columns: []string{filetype.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Filetype{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
